using System;using DesertImage.ECS;using DesertImage.Timers;using Extensions;using UnityEngine;namespace DesertImage{    public static class FrameworkExtensions    {        #region INTS        public static int GetPercentage(this int value, float percentage)        {            return (int)(value * percentage * .01f);        }        #endregion        #region SPRITES        public static void SetAlpha(this SpriteRenderer sprite, float alpha = 1f)        {            sprite.color = sprite.color.SetAlpha(alpha);        }        #endregion        #region RENDERERS        public static void SetColor(this Renderer renderer, Color color)        {            var mat = renderer.material;            mat.color = color;            renderer.material = mat;        }        #endregion        #region QUATERNIONS        public static Quaternion SetY(this Quaternion quaternion, float value)        {            return Quaternion.Euler(new Vector3(quaternion.eulerAngles.x, value, quaternion.eulerAngles.z));        }        public static Quaternion SetX(this Quaternion quaternion, float value)        {            return Quaternion.Euler(new Vector3(value, quaternion.eulerAngles.y, quaternion.eulerAngles.z));        }        public static Quaternion SetZ(this Quaternion quaternion, float value)        {            return Quaternion.Euler(new Vector3(quaternion.eulerAngles.x, quaternion.eulerAngles.y, value));        }        public static void SetLocalRotationY(this Transform transform, float value)        {            var locRot = transform.localRotation;            transform.localRotation = Quaternion.Euler(new Vector3(locRot.eulerAngles.x, value, locRot.eulerAngles.z));        }        #endregion        #region TIMERS        public static ITimer DoActionWithDelay(this object sender, Action action, float delay,            bool ignoreTimescale = false)        {            var timersManager = Core.Instance?.Get<ManagerTimers>();            return timersManager?.PlayAction(sender, action, delay, ignoreTimescale);        }        public static ITimer DoActionWithDelay(this object sender, Action<ITimer> action, float delay,            bool ignoreTimescale, Action<ITimer> timerCallback)        {            var timersManager = Core.Instance?.Get<ManagerTimers>();            return timersManager?.PlayAction(sender, action, delay, ignoreTimescale, timerCallback);        }        public static ITimer DoActionWithDelay(this Action action, float delay,            bool ignoreTimescale = false)        {            var timersManager = Core.Instance.Get<ManagerTimers>();            var timer = timersManager.PlayAction(null, action, delay, ignoreTimescale);            return timer;        }        public static ITimer DoActionsWithDelay(this object sender, params TimerEntry[] actions)        {            var timersManager = Core.Instance.Get<ManagerTimers>();            var timer = timersManager.PlayAction(sender, actions);            return timer;        }        public static void CancelOwnedDoAction(this object sender)        {            var timersManager = Core.Instance?.Get<ManagerTimers>();            timersManager?.CancelAll(sender);        }        public static void CancelAllGlobalDoActions(this object sender)        {            var timersManager = Core.Instance?.Get<ManagerTimers>();            timersManager?.CancelAll();        }        #endregion    }}