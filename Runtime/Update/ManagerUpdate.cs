using System.Collections.Generic;using UnityEngine;namespace DesertImage.Managers{    public class ManagerUpdate : IAwake    {        private readonly List<ITick> _ticks = new List<ITick>();        private readonly List<ITickFixed> _fixedTicks = new List<ITickFixed>();        private readonly List<ITickLate> _lateTicks = new List<ITickLate>();        private int _ticksCount;        private int _fixedTicksCount;        private int _lateTicksCount;        private bool _isBlocked;        public void OnAwake()        {            var managersObj = GameObject.Find("Managers");            if (!managersObj)            {                managersObj = new GameObject("Managers");            }            managersObj.AddComponent<ComponentUpdate>().Setup(this);        }        public void Add(object updatable)        {            if (updatable is ITick tick1) _ticks.Add(tick1);            if (updatable is ITickFixed @fixed) _fixedTicks.Add(@fixed);            if (updatable is ITickLate late) _lateTicks.Add(late);            RefreshCounts();        }        public void Remove(object updatable)        {            if (updatable is ITick tick1) _ticks.Remove(tick1);            if (updatable is ITickFixed fixedTick1) _fixedTicks.Remove(fixedTick1);            if (updatable is ITickLate lateTick1) _lateTicks.Remove(lateTick1);            RefreshCounts();        }        public void Clear()        {            _isBlocked = true;            _ticks.Clear();            _fixedTicks.Clear();            _lateTicks.Clear();            _ticksCount = 0;            _fixedTicksCount = 0;            _lateTicksCount = 0;            _isBlocked = false;        }        private void RefreshCounts()        {            _ticksCount = _ticks.Count;            _fixedTicksCount = _fixedTicks.Count;            _lateTicksCount = _lateTicks.Count;        }        #region TICKS        public void Tick()        {            if (_isBlocked) return;            for (var i = 0; i < _ticksCount; i++)            {                _ticks[i]?.Tick();            }        }        public void LateTick()        {            if (_isBlocked) return;            for (var i = 0; i < _lateTicksCount; i++)            {                _lateTicks[i]?.LateTick();            }        }        public void FixedTick()        {            if (_isBlocked) return;            for (var i = 0; i < _fixedTicksCount; i++)            {                _fixedTicks[i]?.FixedTick();            }        }        #endregion    }}