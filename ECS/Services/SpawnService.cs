using System;using System.Collections;using System.Collections.Generic;using DesertImage;using DesertImage.Pools;using UnityEngine;namespace DesertImage{    public class SpawnService : IService, IAwake    {        public readonly List<ObjectsSpawnNode> Nodes = new List<ObjectsSpawnNode>();        private readonly PoolMonoBehaviour<GameObject> _pool;        public SpawnService()        {            _pool = new PoolGameObject(new GameObject("Object").transform);        }        public void OnAwake()        {            RegisterProcess();        }        #region REGISTER        private void RegisterProcess()        {            if (_pool == null) return;            for (var i = 0; i < Nodes.Count; i++)            {                var spawnNode = Nodes[i];                if (!spawnNode.Prefab) continue;                _pool.Register(spawnNode.Prefab, spawnNode.RegisterCount);            }        }        public void Register(ObjectsSpawnNode node)        {            Nodes.Add(node);            _pool.Register(node.Prefab, node.RegisterCount);        }        public void Register(ushort id, GameObject prefab, int preRegisterCount = 0)        {            Nodes.Add(new ObjectsSpawnNode            {                Id = id,                Prefab = prefab,                RegisterCount = preRegisterCount            });        }        #endregion        #region SPAWN        public GameObject Spawn(ushort id, Vector3 position, Quaternion rotation, Transform parent)        {            GameObject obj = null;            if (_pool == null) return null;            for (var i = 0; i < Nodes.Count; i++)            {                var spawnNode = Nodes[i];                if (spawnNode.Id != id) continue;                obj = _pool.GetInstance(spawnNode.Prefab);                obj.transform.localScale = Vector3.one;                obj.transform.position = position;                obj.transform.rotation = rotation;                obj.transform.transform.SetParent(parent);                break;            }            return obj;        }        public T Spawn<T>(ushort id, Transform parent)        {            var obj = Spawn(id, parent, Vector3.one);            return obj == default ? default : obj.GetComponent<T>();        }        public T Spawn<T>(ushort id, Vector3 position)        {            var obj = Spawn(id, position, Quaternion.identity, null);            return obj == default ? default : obj.GetComponent<T>();        }        public T Spawn<T>(ushort id, Vector3 position, Quaternion rotation, Transform parent = null)        {            var obj = Spawn(id, position, rotation, parent);            return obj == default ? default : obj.GetComponent<T>();        }        public T Spawn<T>(ushort id, Vector3 position, Transform parent)        {            return Spawn(id, position, Quaternion.identity, parent).GetComponent<T>();        }        public GameObject Spawn(ushort id, Transform parent, Vector3 scale)        {            GameObject obj = null;            if (_pool == null) return null;            foreach (var spawnNode in Nodes)            {                if (spawnNode.Id != id) continue;                obj = _pool.GetInstance(spawnNode.Prefab);                if (!obj)                {#if UNITY_EDITOR                    Debug.LogError("SPAWNED obj IS NULL " + id);#endif                    continue;                }                obj.transform.SetParent(parent);                obj.transform.localScale = scale;                obj.transform.localPosition = Vector3.zero;                obj.transform.localRotation = Quaternion.identity;                break;            }            return obj;        }        #endregion        public void ReturnInstance(GameObject obj)        {            _pool.ReturnInstance(obj);        }        public GameObject GetPrefab(ushort id)        {            GameObject pref = null;            foreach (var node in Nodes)            {                if (node.Id != id) continue;                pref = node.Prefab;                break;            }            return pref;        }    }    [Serializable]    public class ObjectsSpawnNode    {        public ushort Id;        public GameObject Prefab;        public int RegisterCount;    }}